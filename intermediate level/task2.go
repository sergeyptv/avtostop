package main

import (
	"fmt"
	"sync"
)

// time.Sleep использовать нельзя. это будет не валидным ответом на собеседовании
// Расскажи подробно что происходит
//
// Создается канал и wait group. Далее, добавляются значения в wait group и происходит запись в цикле в созданный канал
// в горутинах. Затем срабатывает wg.Wait() и не пускает программу выполняться дальше, т.к. горутины пытаются записать в
// небуферезированный канал, но никто из этого канала не читает. Затем - если бы wg.Wait() не было в данном месте,
// создалась бы переменная и все значения из канала прочитались бы, но программа зависла, т.к. канал нигде не закрывается,
// а range будет читать до закрытия канала, выводя нулевые значения типа - при отсутствии данных в канале.
//
// Как сделать так, чтобы работало оставив канал небуферезированным?
//
// Нужно добавить горутину и вынести в нее wg.Wait(), а также закрыть канал после выполнения wg.Wait() - чтобы продолжить
// выполнение программы после for range цикла, иначе он будет бесконечно ждать нового значения и произойдет deadlock.
func main() {
	ch := make(chan int)
	wg := &sync.WaitGroup{}
	wg.Add(3)
	for i := 0; i < 3; i++ {
		go func(v int) {
			defer wg.Done()
			ch <- v * v
		}(i)
	}
	go func() {
		wg.Wait()
		close(ch)
	}()
	var sum int
	for v := range ch {
		sum += v
	}
	fmt.Printf("result: %d\n", sum)
}
